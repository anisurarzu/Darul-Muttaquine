import React, { useState, useRef, useEffect } from "react";
import { Formik, Form, Field } from "formik";
import {
  Card,
  Input,
  Button,
  Select,
  Divider,
  Skeleton,
  Alert,
  Typography,
  message,
  Descriptions,
} from "antd";
import * as Yup from "yup";
import { LoadingOutlined, QrcodeOutlined } from "@ant-design/icons";
import { Html5Qrcode } from "html5-qrcode";
import { coreAxios } from "../../utilities/axios";
import { Link } from "react-router-dom";

const { Title, Text } = Typography;
const { Option } = Select;

const ScholarshipPayment = () => {
  const [step, setStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [scholarshipDetails, setScholarshipDetails] = useState(null);
  const [scanning, setScanning] = useState(false);
  const [cameraError, setCameraError] = useState(false);
  const scannerRef = useRef(null);
  const scannerId = "qr-reader";

  useEffect(() => {
    if (!scanning) return;

    const html5QrCode = new Html5Qrcode(scannerId);
    scannerRef.current = html5QrCode;

    const startScanner = async () => {
      try {
        const cameras = await Html5Qrcode.getCameras();
        if (cameras && cameras.length) {
          const backCamera = cameras.find((camera) =>
            camera.label.toLowerCase().includes("back")
          );
          const cameraId = backCamera ? backCamera.id : cameras[0].id;

          await html5QrCode.start(
            cameraId,
            {
              fps: 10,
              qrbox: { width: 250, height: 250 },
            },
            (decodedText) => {
              handleScanSuccess(decodedText);
            },
            (errorMessage) => {
              // ignore scan errors
            }
          );
        } else {
          setCameraError(true);
          message.error(
            "‡¶ï‡ßã‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶∞‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
          );
        }
      } catch (err) {
        console.error("Camera error:", err);
        setCameraError(true);
        message.error(
          "‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶∞‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
        );
      }
    };

    const handleScanSuccess = async (decodedText) => {
      try {
        // Stop scanner
        await scannerRef.current.stop();
        setScanning(false);

        // Process the scanned ID
        const details = await fetchScholarshipDetails(decodedText);
        if (details) {
          setScholarshipDetails(details);
          setStep(2);
          message.success("‡¶∏‡ßç‡¶ï‡¶≤‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!");
        }
      } catch (err) {
        console.error("Error handling scan:", err);
        message.error("‡¶∏‡ßç‡¶ï‡¶≤‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá");
        setScanning(false);
      }
    };

    console.log("scholarshipdetails", scholarshipDetails);

    startScanner();

    return () => {
      if (scannerRef.current && scannerRef.current.isScanning) {
        scannerRef.current.stop().catch(() => {});
      }
    };
  }, [scanning]);

  const determineScholarshipDetails = (studentData) => {
    const classNumber = parseInt(studentData.instituteClass);
    const resultDetails = studentData.resultDetails[0] || {};

    const totalMarks = resultDetails.totalMarks || 0;
    const courseFund = resultDetails.courseFund || 0;
    const prizeMoney = resultDetails.prizeMoney || 0;

    let grade = null;
    let registrationBalance = courseFund;

    // Determine grade based on marks and class
    // For classes 3 to 5
    if (classNumber >= 3 && classNumber <= 5) {
      if (totalMarks >= 45 && totalMarks <= 48) {
        grade = "General Grade";
      } else if (totalMarks >= 49 && totalMarks <= 50) {
        grade = "Talentpool Grade";
      }
    }
    // For classes 6 to 10
    else if (classNumber >= 6 && classNumber <= 10) {
      if (totalMarks >= 75 && totalMarks < 80) {
        grade = "General Grade";
      } else if (totalMarks >= 80 && totalMarks <= 100) {
        grade = "Talentpool Grade";
      }
    }

    return {
      scholarshipID: studentData.scholarshipRollNumber,
      studentName: studentData.name,
      program: studentData.institute,
      class: studentData.instituteClass,
      totalMarks,
      grade,
      registrationBalance,
      eligible: grade !== null,
      image: studentData.image,
      courseFund,
      prizeMoney,
      needsRecharge: courseFund < 500, // Flag to indicate if balance needs recharge
    };
  };

  const fetchScholarshipDetails = async (scholarshipID) => {
    setLoading(true);
    try {
      const studentResponse = await coreAxios.get(
        `/search-result/${scholarshipID}`
      );
      const studentData = studentResponse.data;
      const details = determineScholarshipDetails(studentData);

      if (!details.eligible) {
        message.error("‡¶è‡¶á ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ ‡¶∏‡ßç‡¶ï‡¶≤‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ ‡¶™‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§");
        return null;
      }

      return details;
    } catch (error) {
      console.error("Error fetching scholarship details:", error);
      message.error("‡¶∏‡ßç‡¶ï‡¶≤‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
      return null;
    } finally {
      setLoading(false);
    }
  };

  const handleScholarshipIDSubmit = async (values) => {
    try {
      const details = await fetchScholarshipDetails(values.scholarshipID);
      if (details) {
        setScholarshipDetails(details);
        setStep(2);
      }
    } catch (error) {
      console.error("Error processing scholarship details:", error);
    }
  };

  const resetForm = () => {
    setScholarshipDetails(null);
    setStep(1);
  };

  const startQRScanner = () => {
    setScanning(true);
  };

  return (
    <div className="min-h-screen bg-green-50 py-8 px-4 pt-20">
      <div className="max-w-4xl mx-auto">
        <Card className="shadow-lg border-green-200">
          <Title level={3} className="text-center mb-6 text-green-800">
            ‡¶∏‡ßç‡¶ï‡¶≤‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ ‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶®
          </Title>

          <Alert
            message="üìå ‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ"
            description={
              <div className="text-green-700">
                <p className="mb-2">
                  ‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®:
                </p>
                <ul className="pl-5 space-y-1">
                  <li>
                    <span className="font-bold">*</span> ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏
                    ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø‡•§
                  </li>
                  <li>
                    <span className="font-bold">*</span> ‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞
                    ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶´‡¶ø ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡ßá‡¶ü‡ßá ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶¨‡ßá‡•§
                  </li>
                  <li>
                    <span className="font-bold">*</span> ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶∏‡¶ï‡¶≤
                    ‡¶§‡¶•‡ßç‡¶Ø ‡¶≠‡¶æ‡¶≤‡ßã‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶®‡•§
                  </li>
                </ul>
              </div>
            }
            type="success"
            showIcon
            className="mb-6 border-green-300 bg-green-50"
          />

          {scanning && (
            <div className="mb-6">
              <p className="text-center font-semibold text-green-700 mb-2">
                ‡¶∏‡ßç‡¶ï‡¶≤‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ ‡¶ï‡¶ø‡¶â‡¶Ü‡¶∞ ‡¶ï‡ßã‡¶° ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
              </p>
              {cameraError ? (
                <div className="text-center p-4 border rounded bg-gray-50">
                  <p className="text-red-500 mb-2">
                    ‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶∞‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
                  </p>
                  <Button
                    type="primary"
                    onClick={() => {
                      setCameraError(false);
                      setScanning(true);
                    }}
                  >
                    ‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßá‡¶∞‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®
                  </Button>
                </div>
              ) : (
                <div className="w-full h-[250px] border rounded bg-gray-50 flex items-center justify-center">
                  <div id={scannerId} className="w-full h-full" />
                </div>
              )}
              <div className="text-center mt-4">
                <Button onClick={() => setScanning(false)}>
                  ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®
                </Button>
              </div>
            </div>
          )}

          {!scanning && step === 1 && (
            <Formik
              initialValues={{ scholarshipID: "" }}
              onSubmit={handleScholarshipIDSubmit}
            >
              {({ errors, touched, setFieldValue }) => (
                <Form>
                  <div className="mb-6">
                    <label
                      htmlFor="scholarshipID"
                      className="block text-sm font-medium text-green-700 mb-2"
                    >
                      ‡¶∏‡ßç‡¶ï‡¶≤‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®
                    </label>
                    <div className="flex gap-2">
                      <Field
                        as={Input}
                        name="scholarshipID"
                        placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: DMS25000"
                        size="large"
                        className={`flex-1 ${
                          errors.scholarshipID && touched.scholarshipID
                            ? "border-red-500"
                            : "border-green-300"
                        }`}
                      />
                      <Button
                        type="default"
                        size="large"
                        icon={<QrcodeOutlined />}
                        onClick={startQRScanner}
                        className="border-green-300"
                      >
                        ‡¶∏‡ßç‡¶ï‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
                      </Button>
                    </div>
                    {errors.scholarshipID && touched.scholarshipID ? (
                      <div className="text-red-500 text-sm mt-1">
                        {errors.scholarshipID}
                      </div>
                    ) : null}
                  </div>

                  <Button
                    type="primary"
                    htmlType="submit"
                    size="large"
                    className="w-full bg-green-600 hover:bg-green-700 border-green-700"
                    loading={loading}
                  >
                    {loading ? "‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..." : "‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®"}
                  </Button>
                </Form>
              )}
            </Formik>
          )}

          {!scanning && step === 2 && scholarshipDetails && (
            <div>
              {loading ? (
                <Skeleton active paragraph={{ rows: 4 }} />
              ) : (
                <>
                  <div className="mb-6 p-4 bg-green-50 rounded-lg border border-green-200">
                    <div className="flex items-center mb-4">
                      {scholarshipDetails.image && (
                        <img
                          src={scholarshipDetails.image}
                          alt="Student"
                          className="w-16 h-16 rounded-full object-cover mr-4"
                        />
                      )}
                      <div>
                        <Title level={4} className="mb-0 text-green-800">
                          {scholarshipDetails.studentName}
                        </Title>
                        <Text className="text-green-600">
                          {scholarshipDetails.program}
                        </Text>
                      </div>
                    </div>

                    <Descriptions
                      bordered
                      column={2}
                      size="small"
                      className="mb-4"
                    >
                      <Descriptions.Item label="‡¶∂‡ßç‡¶∞‡ßá‡¶£‡ßÄ">
                        {scholarshipDetails.class}
                      </Descriptions.Item>
                      <Descriptions.Item label="‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞">
                        {scholarshipDetails.totalMarks}
                      </Descriptions.Item>
                      <Descriptions.Item label="‡¶ó‡ßç‡¶∞‡ßá‡¶°">
                        <span className="font-semibold">
                          {scholarshipDetails.grade}
                        </span>
                      </Descriptions.Item>
                      <Descriptions.Item label="‡¶Ü‡¶á‡¶°‡¶ø">
                        {scholarshipDetails.scholarshipID}
                      </Descriptions.Item>
                    </Descriptions>

                    <Divider className="my-4 border-green-200" />

                    <div className="text-center">
                      <div className="p-3 bg-green-100 rounded border border-green-200 inline-block">
                        <Text strong className="text-green-700">
                          ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏:
                        </Text>
                        <p className="text-3xl font-bold text-green-700 my-2">
                          {scholarshipDetails.registrationBalance} ‡¶ü‡¶æ‡¶ï‡¶æ
                        </p>
                        {scholarshipDetails.needsRecharge && (
                          <div className="mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded">
                            <Text strong className="text-yellow-700 block mb-2">
                              ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ö‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§! ‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶®‡ßá‡¶∞
                              ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡ßÇ‡¶®‡ßç‡¶Ø‡¶§‡¶Æ ‡ß´‡ß¶‡ß¶ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡•§
                            </Text>
                            <Text className="text-yellow-700 block mb-1">
                              ‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂/‡¶®‡¶ó‡¶¶/‡¶∞‡¶ï‡ßá‡¶ü‡ßá ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:{" "}
                              <strong>‡ß¶‡ßß‡ß≠‡ßß‡ß®-‡ß©‡ß™‡ß´‡ß¨‡ß≠‡ßÆ</strong>
                            </Text>
                            <Text className="text-yellow-700 block">
                              ‡¶™‡ßá‡¶Æ‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡¶∞ ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®:{" "}
                              <strong>‡ß¶‡ßß‡ß≠‡ßß‡ß®-‡ß©‡ß™‡ß´‡ß¨‡ß≠‡ßÆ</strong>
                            </Text>
                          </div>
                        )}
                        <Text className="text-green-600">
                          ‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
                        </Text>
                      </div>
                    </div>

                    <Divider className="my-4 border-green-200" />
                    <div className="mb-4 p-3 bg-blue-50 rounded border border-blue-200">
                      <p className="text-xl font-bold text-blue-700 my-1">
                        ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶ú ‡¶Æ‡¶æ‡¶®‡¶ø: {scholarshipDetails.prizeMoney} ‡¶ü‡¶æ‡¶ï‡¶æ
                      </p>
                      <Text className="text-blue-600">
                        ‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶á ‡¶Ö‡¶∞‡ßç‡¶•/‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡ßá‡ßü‡ßá ‡¶ó‡¶ø‡ßü‡ßá‡¶õ‡ßá‡¶®
                      </Text>
                    </div>
                  </div>

                  <div className="text-center">
                    <Link to="/courses">
                      <Button
                        type="primary"
                        size="large"
                        className="bg-green-600 hover:bg-green-700 border-green-700"
                        disabled={scholarshipDetails.needsRecharge}
                      >
                        ‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
                      </Button>
                    </Link>
                    <Button
                      onClick={resetForm}
                      size="large"
                      className="ml-4 border-green-500 text-green-700 hover:border-green-700"
                    >
                      ‡¶™‡¶ø‡¶õ‡¶®‡ßá
                    </Button>
                  </div>
                </>
              )}
            </div>
          )}
        </Card>
      </div>
    </div>
  );
};

export default ScholarshipPayment;
