{"ast":null,"code":"var _jsxFileName = \"/Users/macbookair/Desktop/DMF_SITE/DMF-NEW/Darul-Muttaquine/src/components/PrivateRoute/PrivateRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  _s();\n  // Check if the user is authenticated (you can implement this logic based on your authentication mechanism)\n  const isAuthenticated = !!localStorage.getItem(\"token\");\n\n  // State to store the intended destination before login\n  const [redirectTo, setRedirectTo] = useState(null);\n  return /*#__PURE__*/_jsxDEV(Route, {\n    ...rest,\n    render: props => isAuthenticated ? /*#__PURE__*/_jsxDEV(Component, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: \"/login\",\n        state: {\n          from: props.location\n        } // Pass the current location as state\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n_s(PrivateRoute, \"7bgYl5gYAQJxwzOlk+qZwCeDHtw=\");\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","useState","Route","Redirect","jsxDEV","_jsxDEV","PrivateRoute","component","Component","rest","_s","isAuthenticated","localStorage","getItem","redirectTo","setRedirectTo","render","props","fileName","_jsxFileName","lineNumber","columnNumber","to","pathname","state","from","location","_c","$RefreshReg$"],"sources":["/Users/macbookair/Desktop/DMF_SITE/DMF-NEW/Darul-Muttaquine/src/components/PrivateRoute/PrivateRoute.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  // Check if the user is authenticated (you can implement this logic based on your authentication mechanism)\n  const isAuthenticated = !!localStorage.getItem(\"token\");\n\n  // State to store the intended destination before login\n  const [redirectTo, setRedirectTo] = useState(null);\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isAuthenticated ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n              state: { from: props.location }, // Pass the current location as state\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAGA,CAAC;EAAEC,SAAS,EAAEC,SAAS;EAAE,GAAGC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC1D;EACA,MAAMC,eAAe,GAAG,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAEvD;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAElD,oBACEI,OAAA,CAACH,KAAK;IAAA,GACAO,IAAI;IACRO,MAAM,EAAGC,KAAK,IACZN,eAAe,gBACbN,OAAA,CAACG,SAAS;MAAA,GAAKS;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAExBhB,OAAA,CAACF,QAAQ;MACPmB,EAAE,EAAE;QACFC,QAAQ,EAAE,QAAQ;QAClBC,KAAK,EAAE;UAAEC,IAAI,EAAER,KAAK,CAACS;QAAS,CAAC,CAAE;MACnC;IAAE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAEJ;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEN,CAAC;AAACX,EAAA,CAxBIJ,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AA0BlB,eAAeA,YAAY;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}